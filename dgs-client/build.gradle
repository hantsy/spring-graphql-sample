plugins {
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id "com.netflix.dgs.codegen" version "6.1.10" //https://plugins.gradle.org/plugin/com.netflix.dgs.codegen
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
java {
 sourceCompatibility = '21'
}


repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/snapshot" }
}

dependencyManagement {
    imports {
        mavenBom("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:8.5.5")
    }
}

dependencies {
    //implementation(platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:8.2.0"))
    implementation "com.netflix.graphql.dgs:graphql-dgs-client"

    //spring boot starter
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //configure Lombok for compile java/ compile tests
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

generateJava {
    schemaPaths = ["${projectDir}/src/main/resources/schema"] // List of directories containing schema files
    packageName = 'com.example.demo.gql' // The package name to use to generate sources
    generateClient = true // Enable generating the type safe query API
    //typeMapping = ["DateTime": "java.time.LocalDateTime"]
    shortProjectionNames = false
    maxProjectionDepth = 2
    snakeCaseConstantNames = true
}

test {
    useJUnitPlatform()
}
