type Post{
    id: ID!
    title: String!
    content: String
    comments: [Comment!]
    createdAt: LocalDateTime
    updatedAt: LocalDateTime
    authorId:String
    author:Author
}
type Author{
    id:ID!
    name:String!
    email:String!
    createdAt: LocalDateTime
    posts: [Post!]
    profile: Profile
}
type Profile {
    bio: String,
    coverImageUrl: String!
}
type Comment{
    id: ID!
    content: String!
    postId: String!
    createdAt: LocalDateTime
}

input CreatePostInput {
    title: String!
    content: String!
}

input CommentInput{
    postId: String!
    content: String!
}

type Query{
    allPosts: [Post!]!
    postById(postId: String!): Post
    author(authorId: String!): Author

}

type AuthResult {
    name:String!
    roles:[String!]
    token:String!
}

input Credentials {
    username:String!
    password:String!
}

type Mutation {
    signIn(credentials: Credentials!): AuthResult
    logout:Boolean
    createPost(createPostInput: CreatePostInput!): Post!
    updateProfile(bio:String, coverImage: Upload!): Profile! @skipcodegen
    addComment(commentInput: CommentInput!): Comment!
}

type Subscription {
    commentAdded: Comment!
}

scalar LocalDateTime
scalar Upload
directive @skipcodegen on FIELD_DEFINITION